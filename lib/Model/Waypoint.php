<?php
/**
 * Waypoint
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Waypoint Class Doc Comment
 *
 * @category Class
 * @description A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Waypoint implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Waypoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'type' => '\OpenAPI\Client\Model\WaypointType',
        'system_symbol' => 'string',
        'x' => 'int',
        'y' => 'int',
        'orbitals' => '\OpenAPI\Client\Model\WaypointOrbital[]',
        'orbits' => 'string',
        'faction' => '\OpenAPI\Client\Model\WaypointFaction',
        'traits' => '\OpenAPI\Client\Model\WaypointTrait[]',
        'modifiers' => '\OpenAPI\Client\Model\WaypointModifier[]',
        'chart' => '\OpenAPI\Client\Model\Chart',
        'is_under_construction' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'type' => null,
        'system_symbol' => null,
        'x' => null,
        'y' => null,
        'orbitals' => null,
        'orbits' => null,
        'faction' => null,
        'traits' => null,
        'modifiers' => null,
        'chart' => null,
        'is_under_construction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'symbol' => false,
        'type' => false,
        'system_symbol' => false,
        'x' => false,
        'y' => false,
        'orbitals' => false,
        'orbits' => false,
        'faction' => false,
        'traits' => false,
        'modifiers' => false,
        'chart' => false,
        'is_under_construction' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'type' => 'type',
        'system_symbol' => 'systemSymbol',
        'x' => 'x',
        'y' => 'y',
        'orbitals' => 'orbitals',
        'orbits' => 'orbits',
        'faction' => 'faction',
        'traits' => 'traits',
        'modifiers' => 'modifiers',
        'chart' => 'chart',
        'is_under_construction' => 'isUnderConstruction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'type' => 'setType',
        'system_symbol' => 'setSystemSymbol',
        'x' => 'setX',
        'y' => 'setY',
        'orbitals' => 'setOrbitals',
        'orbits' => 'setOrbits',
        'faction' => 'setFaction',
        'traits' => 'setTraits',
        'modifiers' => 'setModifiers',
        'chart' => 'setChart',
        'is_under_construction' => 'setIsUnderConstruction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'type' => 'getType',
        'system_symbol' => 'getSystemSymbol',
        'x' => 'getX',
        'y' => 'getY',
        'orbitals' => 'getOrbitals',
        'orbits' => 'getOrbits',
        'faction' => 'getFaction',
        'traits' => 'getTraits',
        'modifiers' => 'getModifiers',
        'chart' => 'getChart',
        'is_under_construction' => 'getIsUnderConstruction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('system_symbol', $data ?? [], null);
        $this->setIfExists('x', $data ?? [], null);
        $this->setIfExists('y', $data ?? [], null);
        $this->setIfExists('orbitals', $data ?? [], null);
        $this->setIfExists('orbits', $data ?? [], null);
        $this->setIfExists('faction', $data ?? [], null);
        $this->setIfExists('traits', $data ?? [], null);
        $this->setIfExists('modifiers', $data ?? [], null);
        $this->setIfExists('chart', $data ?? [], null);
        $this->setIfExists('is_under_construction', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ((mb_strlen($this->container['symbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'symbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['system_symbol'] === null) {
            $invalidProperties[] = "'system_symbol' can't be null";
        }
        if ((mb_strlen($this->container['system_symbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'system_symbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['x'] === null) {
            $invalidProperties[] = "'x' can't be null";
        }
        if ($this->container['y'] === null) {
            $invalidProperties[] = "'y' can't be null";
        }
        if ($this->container['orbitals'] === null) {
            $invalidProperties[] = "'orbitals' can't be null";
        }
        if (!is_null($this->container['orbits']) && (mb_strlen($this->container['orbits']) < 1)) {
            $invalidProperties[] = "invalid value for 'orbits', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['traits'] === null) {
            $invalidProperties[] = "'traits' can't be null";
        }
        if ($this->container['is_under_construction'] === null) {
            $invalidProperties[] = "'is_under_construction' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol The symbol of the waypoint.
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }

        if ((mb_strlen($symbol) < 1)) {
            throw new \InvalidArgumentException('invalid length for $symbol when calling Waypoint., must be bigger than or equal to 1.');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\WaypointType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\WaypointType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets system_symbol
     *
     * @return string
     */
    public function getSystemSymbol()
    {
        return $this->container['system_symbol'];
    }

    /**
     * Sets system_symbol
     *
     * @param string $system_symbol The symbol of the system.
     *
     * @return self
     */
    public function setSystemSymbol($system_symbol)
    {
        if (is_null($system_symbol)) {
            throw new \InvalidArgumentException('non-nullable system_symbol cannot be null');
        }

        if ((mb_strlen($system_symbol) < 1)) {
            throw new \InvalidArgumentException('invalid length for $system_symbol when calling Waypoint., must be bigger than or equal to 1.');
        }

        $this->container['system_symbol'] = $system_symbol;

        return $this;
    }

    /**
     * Gets x
     *
     * @return int
     */
    public function getX()
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     *
     * @param int $x Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.
     *
     * @return self
     */
    public function setX($x)
    {
        if (is_null($x)) {
            throw new \InvalidArgumentException('non-nullable x cannot be null');
        }
        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets y
     *
     * @return int
     */
    public function getY()
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     *
     * @param int $y Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.
     *
     * @return self
     */
    public function setY($y)
    {
        if (is_null($y)) {
            throw new \InvalidArgumentException('non-nullable y cannot be null');
        }
        $this->container['y'] = $y;

        return $this;
    }

    /**
     * Gets orbitals
     *
     * @return \OpenAPI\Client\Model\WaypointOrbital[]
     */
    public function getOrbitals()
    {
        return $this->container['orbitals'];
    }

    /**
     * Sets orbitals
     *
     * @param \OpenAPI\Client\Model\WaypointOrbital[] $orbitals Waypoints that orbit this waypoint.
     *
     * @return self
     */
    public function setOrbitals($orbitals)
    {
        if (is_null($orbitals)) {
            throw new \InvalidArgumentException('non-nullable orbitals cannot be null');
        }
        $this->container['orbitals'] = $orbitals;

        return $this;
    }

    /**
     * Gets orbits
     *
     * @return string|null
     */
    public function getOrbits()
    {
        return $this->container['orbits'];
    }

    /**
     * Sets orbits
     *
     * @param string|null $orbits The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.
     *
     * @return self
     */
    public function setOrbits($orbits)
    {
        if (is_null($orbits)) {
            throw new \InvalidArgumentException('non-nullable orbits cannot be null');
        }

        if ((mb_strlen($orbits) < 1)) {
            throw new \InvalidArgumentException('invalid length for $orbits when calling Waypoint., must be bigger than or equal to 1.');
        }

        $this->container['orbits'] = $orbits;

        return $this;
    }

    /**
     * Gets faction
     *
     * @return \OpenAPI\Client\Model\WaypointFaction|null
     */
    public function getFaction()
    {
        return $this->container['faction'];
    }

    /**
     * Sets faction
     *
     * @param \OpenAPI\Client\Model\WaypointFaction|null $faction faction
     *
     * @return self
     */
    public function setFaction($faction)
    {
        if (is_null($faction)) {
            throw new \InvalidArgumentException('non-nullable faction cannot be null');
        }
        $this->container['faction'] = $faction;

        return $this;
    }

    /**
     * Gets traits
     *
     * @return \OpenAPI\Client\Model\WaypointTrait[]
     */
    public function getTraits()
    {
        return $this->container['traits'];
    }

    /**
     * Sets traits
     *
     * @param \OpenAPI\Client\Model\WaypointTrait[] $traits The traits of the waypoint.
     *
     * @return self
     */
    public function setTraits($traits)
    {
        if (is_null($traits)) {
            throw new \InvalidArgumentException('non-nullable traits cannot be null');
        }
        $this->container['traits'] = $traits;

        return $this;
    }

    /**
     * Gets modifiers
     *
     * @return \OpenAPI\Client\Model\WaypointModifier[]|null
     */
    public function getModifiers()
    {
        return $this->container['modifiers'];
    }

    /**
     * Sets modifiers
     *
     * @param \OpenAPI\Client\Model\WaypointModifier[]|null $modifiers The modifiers of the waypoint.
     *
     * @return self
     */
    public function setModifiers($modifiers)
    {
        if (is_null($modifiers)) {
            throw new \InvalidArgumentException('non-nullable modifiers cannot be null');
        }
        $this->container['modifiers'] = $modifiers;

        return $this;
    }

    /**
     * Gets chart
     *
     * @return \OpenAPI\Client\Model\Chart|null
     */
    public function getChart()
    {
        return $this->container['chart'];
    }

    /**
     * Sets chart
     *
     * @param \OpenAPI\Client\Model\Chart|null $chart chart
     *
     * @return self
     */
    public function setChart($chart)
    {
        if (is_null($chart)) {
            throw new \InvalidArgumentException('non-nullable chart cannot be null');
        }
        $this->container['chart'] = $chart;

        return $this;
    }

    /**
     * Gets is_under_construction
     *
     * @return bool
     */
    public function getIsUnderConstruction()
    {
        return $this->container['is_under_construction'];
    }

    /**
     * Sets is_under_construction
     *
     * @param bool $is_under_construction True if the waypoint is under construction.
     *
     * @return self
     */
    public function setIsUnderConstruction($is_under_construction)
    {
        if (is_null($is_under_construction)) {
            throw new \InvalidArgumentException('non-nullable is_under_construction cannot be null');
        }
        $this->container['is_under_construction'] = $is_under_construction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


