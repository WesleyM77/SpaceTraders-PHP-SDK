<?php
/**
 * MarketTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MarketTransaction Class Doc Comment
 *
 * @category Class
 * @description Result of a transaction with a market.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MarketTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MarketTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'waypoint_symbol' => 'string',
        'ship_symbol' => 'string',
        'trade_symbol' => 'string',
        'type' => 'string',
        'units' => 'int',
        'price_per_unit' => 'int',
        'total_price' => 'int',
        'timestamp' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'waypoint_symbol' => null,
        'ship_symbol' => null,
        'trade_symbol' => null,
        'type' => null,
        'units' => null,
        'price_per_unit' => null,
        'total_price' => null,
        'timestamp' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'waypoint_symbol' => false,
        'ship_symbol' => false,
        'trade_symbol' => false,
        'type' => false,
        'units' => false,
        'price_per_unit' => false,
        'total_price' => false,
        'timestamp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'waypoint_symbol' => 'waypointSymbol',
        'ship_symbol' => 'shipSymbol',
        'trade_symbol' => 'tradeSymbol',
        'type' => 'type',
        'units' => 'units',
        'price_per_unit' => 'pricePerUnit',
        'total_price' => 'totalPrice',
        'timestamp' => 'timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'waypoint_symbol' => 'setWaypointSymbol',
        'ship_symbol' => 'setShipSymbol',
        'trade_symbol' => 'setTradeSymbol',
        'type' => 'setType',
        'units' => 'setUnits',
        'price_per_unit' => 'setPricePerUnit',
        'total_price' => 'setTotalPrice',
        'timestamp' => 'setTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'waypoint_symbol' => 'getWaypointSymbol',
        'ship_symbol' => 'getShipSymbol',
        'trade_symbol' => 'getTradeSymbol',
        'type' => 'getType',
        'units' => 'getUnits',
        'price_per_unit' => 'getPricePerUnit',
        'total_price' => 'getTotalPrice',
        'timestamp' => 'getTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PURCHASE = 'PURCHASE';
    public const TYPE_SELL = 'SELL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PURCHASE,
            self::TYPE_SELL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('waypoint_symbol', $data ?? [], null);
        $this->setIfExists('ship_symbol', $data ?? [], null);
        $this->setIfExists('trade_symbol', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('price_per_unit', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['waypoint_symbol'] === null) {
            $invalidProperties[] = "'waypoint_symbol' can't be null";
        }
        if ((mb_strlen($this->container['waypoint_symbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'waypoint_symbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ship_symbol'] === null) {
            $invalidProperties[] = "'ship_symbol' can't be null";
        }
        if ($this->container['trade_symbol'] === null) {
            $invalidProperties[] = "'trade_symbol' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['units'] === null) {
            $invalidProperties[] = "'units' can't be null";
        }
        if (($this->container['units'] < 0)) {
            $invalidProperties[] = "invalid value for 'units', must be bigger than or equal to 0.";
        }

        if ($this->container['price_per_unit'] === null) {
            $invalidProperties[] = "'price_per_unit' can't be null";
        }
        if (($this->container['price_per_unit'] < 0)) {
            $invalidProperties[] = "invalid value for 'price_per_unit', must be bigger than or equal to 0.";
        }

        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if (($this->container['total_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_price', must be bigger than or equal to 0.";
        }

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets waypoint_symbol
     *
     * @return string
     */
    public function getWaypointSymbol()
    {
        return $this->container['waypoint_symbol'];
    }

    /**
     * Sets waypoint_symbol
     *
     * @param string $waypoint_symbol The symbol of the waypoint.
     *
     * @return self
     */
    public function setWaypointSymbol($waypoint_symbol)
    {
        if (is_null($waypoint_symbol)) {
            throw new \InvalidArgumentException('non-nullable waypoint_symbol cannot be null');
        }

        if ((mb_strlen($waypoint_symbol) < 1)) {
            throw new \InvalidArgumentException('invalid length for $waypoint_symbol when calling MarketTransaction., must be bigger than or equal to 1.');
        }

        $this->container['waypoint_symbol'] = $waypoint_symbol;

        return $this;
    }

    /**
     * Gets ship_symbol
     *
     * @return string
     */
    public function getShipSymbol()
    {
        return $this->container['ship_symbol'];
    }

    /**
     * Sets ship_symbol
     *
     * @param string $ship_symbol The symbol of the ship that made the transaction.
     *
     * @return self
     */
    public function setShipSymbol($ship_symbol)
    {
        if (is_null($ship_symbol)) {
            throw new \InvalidArgumentException('non-nullable ship_symbol cannot be null');
        }
        $this->container['ship_symbol'] = $ship_symbol;

        return $this;
    }

    /**
     * Gets trade_symbol
     *
     * @return string
     */
    public function getTradeSymbol()
    {
        return $this->container['trade_symbol'];
    }

    /**
     * Sets trade_symbol
     *
     * @param string $trade_symbol The symbol of the trade good.
     *
     * @return self
     */
    public function setTradeSymbol($trade_symbol)
    {
        if (is_null($trade_symbol)) {
            throw new \InvalidArgumentException('non-nullable trade_symbol cannot be null');
        }
        $this->container['trade_symbol'] = $trade_symbol;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of transaction.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets units
     *
     * @return int
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param int $units The number of units of the transaction.
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }

        if (($units < 0)) {
            throw new \InvalidArgumentException('invalid value for $units when calling MarketTransaction., must be bigger than or equal to 0.');
        }

        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets price_per_unit
     *
     * @return int
     */
    public function getPricePerUnit()
    {
        return $this->container['price_per_unit'];
    }

    /**
     * Sets price_per_unit
     *
     * @param int $price_per_unit The price per unit of the transaction.
     *
     * @return self
     */
    public function setPricePerUnit($price_per_unit)
    {
        if (is_null($price_per_unit)) {
            throw new \InvalidArgumentException('non-nullable price_per_unit cannot be null');
        }

        if (($price_per_unit < 0)) {
            throw new \InvalidArgumentException('invalid value for $price_per_unit when calling MarketTransaction., must be bigger than or equal to 0.');
        }

        $this->container['price_per_unit'] = $price_per_unit;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return int
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param int $total_price The total price of the transaction.
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }

        if (($total_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_price when calling MarketTransaction., must be bigger than or equal to 0.');
        }

        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp The timestamp of the transaction.
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


