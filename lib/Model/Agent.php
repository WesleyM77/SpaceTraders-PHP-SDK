<?php
/**
 * Agent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Agent Class Doc Comment
 *
 * @category Class
 * @description Agent details.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Agent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Agent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'symbol' => 'string',
        'headquarters' => 'string',
        'credits' => 'int',
        'starting_faction' => 'string',
        'ship_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'symbol' => null,
        'headquarters' => null,
        'credits' => 'int64',
        'starting_faction' => null,
        'ship_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'symbol' => false,
        'headquarters' => false,
        'credits' => false,
        'starting_faction' => false,
        'ship_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'symbol' => 'symbol',
        'headquarters' => 'headquarters',
        'credits' => 'credits',
        'starting_faction' => 'startingFaction',
        'ship_count' => 'shipCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'symbol' => 'setSymbol',
        'headquarters' => 'setHeadquarters',
        'credits' => 'setCredits',
        'starting_faction' => 'setStartingFaction',
        'ship_count' => 'setShipCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'symbol' => 'getSymbol',
        'headquarters' => 'getHeadquarters',
        'credits' => 'getCredits',
        'starting_faction' => 'getStartingFaction',
        'ship_count' => 'getShipCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('headquarters', $data ?? [], null);
        $this->setIfExists('credits', $data ?? [], null);
        $this->setIfExists('starting_faction', $data ?? [], null);
        $this->setIfExists('ship_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_id']) && (mb_strlen($this->container['account_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ((mb_strlen($this->container['symbol']) > 14)) {
            $invalidProperties[] = "invalid value for 'symbol', the character length must be smaller than or equal to 14.";
        }

        if ((mb_strlen($this->container['symbol']) < 3)) {
            $invalidProperties[] = "invalid value for 'symbol', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['headquarters'] === null) {
            $invalidProperties[] = "'headquarters' can't be null";
        }
        if ((mb_strlen($this->container['headquarters']) < 1)) {
            $invalidProperties[] = "invalid value for 'headquarters', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['credits'] === null) {
            $invalidProperties[] = "'credits' can't be null";
        }
        if ($this->container['starting_faction'] === null) {
            $invalidProperties[] = "'starting_faction' can't be null";
        }
        if ((mb_strlen($this->container['starting_faction']) < 1)) {
            $invalidProperties[] = "invalid value for 'starting_faction', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ship_count'] === null) {
            $invalidProperties[] = "'ship_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id Account ID that is tied to this agent. Only included on your own agent.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }

        if ((mb_strlen($account_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling Agent., must be bigger than or equal to 1.');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol Symbol of the agent.
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        if ((mb_strlen($symbol) > 14)) {
            throw new \InvalidArgumentException('invalid length for $symbol when calling Agent., must be smaller than or equal to 14.');
        }
        if ((mb_strlen($symbol) < 3)) {
            throw new \InvalidArgumentException('invalid length for $symbol when calling Agent., must be bigger than or equal to 3.');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets headquarters
     *
     * @return string
     */
    public function getHeadquarters()
    {
        return $this->container['headquarters'];
    }

    /**
     * Sets headquarters
     *
     * @param string $headquarters The headquarters of the agent.
     *
     * @return self
     */
    public function setHeadquarters($headquarters)
    {
        if (is_null($headquarters)) {
            throw new \InvalidArgumentException('non-nullable headquarters cannot be null');
        }

        if ((mb_strlen($headquarters) < 1)) {
            throw new \InvalidArgumentException('invalid length for $headquarters when calling Agent., must be bigger than or equal to 1.');
        }

        $this->container['headquarters'] = $headquarters;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return int
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param int $credits The number of credits the agent has available. Credits can be negative if funds have been overdrawn.
     *
     * @return self
     */
    public function setCredits($credits)
    {
        if (is_null($credits)) {
            throw new \InvalidArgumentException('non-nullable credits cannot be null');
        }
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets starting_faction
     *
     * @return string
     */
    public function getStartingFaction()
    {
        return $this->container['starting_faction'];
    }

    /**
     * Sets starting_faction
     *
     * @param string $starting_faction The faction the agent started with.
     *
     * @return self
     */
    public function setStartingFaction($starting_faction)
    {
        if (is_null($starting_faction)) {
            throw new \InvalidArgumentException('non-nullable starting_faction cannot be null');
        }

        if ((mb_strlen($starting_faction) < 1)) {
            throw new \InvalidArgumentException('invalid length for $starting_faction when calling Agent., must be bigger than or equal to 1.');
        }

        $this->container['starting_faction'] = $starting_faction;

        return $this;
    }

    /**
     * Gets ship_count
     *
     * @return int
     */
    public function getShipCount()
    {
        return $this->container['ship_count'];
    }

    /**
     * Sets ship_count
     *
     * @param int $ship_count How many ships are owned by the agent.
     *
     * @return self
     */
    public function setShipCount($ship_count)
    {
        if (is_null($ship_count)) {
            throw new \InvalidArgumentException('non-nullable ship_count cannot be null');
        }
        $this->container['ship_count'] = $ship_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


